{
	"name": "df_transform_data_population_by_age",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_population_raw_tsv",
						"type": "DatasetReference"
					},
					"name": "PopulationByAgeData"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_country",
						"type": "DatasetReference"
					},
					"name": "LookupCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_population_data",
						"type": "DatasetReference"
					},
					"name": "SinkPopulationData"
				}
			],
			"transformations": [
				{
					"name": "DerivingNewColumnFromFirstColumn"
				},
				{
					"name": "SelectOnlyReuiredcolumn"
				},
				{
					"name": "LookuponCountryCode"
				},
				{
					"name": "SelectOnlyRequiredColumn"
				},
				{
					"name": "PivotingAccordingAgeGroup"
				},
				{
					"name": "SortingAccourdingtoCountry"
				},
				{
					"name": "FilterDataForCountryNullData"
				},
				{
					"name": "SelectingCorrectName"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2008 } as string,",
				"          {2009 } as string,",
				"          {2010 } as string,",
				"          {2011 } as string,",
				"          {2012 } as string,",
				"          {2013 } as string,",
				"          {2014 } as string,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PopulationByAgeData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LookupCountry",
				"SelectOnlyReuiredcolumn derive(age_group = split(indic_de_geo_time, ',')[1],",
				"          country_code_2_digit = split(indic_de_geo_time, ',')[2]) ~> DerivingNewColumnFromFirstColumn",
				"PopulationByAgeData select(mapColumn(",
				"          indic_de_geo_time = {indic_de,geo\\time},",
				"          {2008 },",
				"          {2009 },",
				"          {2010 },",
				"          {2011 },",
				"          {2012 },",
				"          {2013 },",
				"          {2014 },",
				"          {2015 },",
				"          {2016 },",
				"          {2017 },",
				"          {2018 },",
				"          {2019 }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyReuiredcolumn",
				"DerivingNewColumnFromFirstColumn, LookupCountry lookup(DerivingNewColumnFromFirstColumn@country_code_2_digit == LookupCountry@country_code_2_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookuponCountryCode",
				"LookuponCountryCode select(mapColumn(",
				"          age_group,",
				"          country,",
				"          country_code_2_digit = DerivingNewColumnFromFirstColumn@country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          {2019 }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyRequiredColumn",
				"SelectOnlyRequiredColumn pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(age_group, ['PC_Y0_14', 'PC_Y25_49', 'PC_Y50_64', 'PC_Y65_79', 'PC_Y80_MAX']),",
				"     age_group_ = round(sum({2019 }),1),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotingAccordingAgeGroup",
				"SelectingCorrectName sort(asc(country, true)) ~> SortingAccourdingtoCountry",
				"SortingAccourdingtoCountry filter(!isNull(country)) ~> FilterDataForCountryNullData",
				"PivotingAccordingAgeGroup select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          age_group_0_14 = age_group__PC_Y0_14,",
				"          age_group_25_49 = age_group__PC_Y25_49,",
				"          age_group_50_64 = age_group__PC_Y50_64,",
				"          age_group_65_79 = age_group__PC_Y65_79,",
				"          age_group_80_max = age_group__PC_Y80_MAX",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingCorrectName",
				"FilterDataForCountryNullData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['population_by_age.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkPopulationData"
			]
		}
	}
}